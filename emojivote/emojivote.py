from copy import copy
from datetime import datetime, timedelta
import time
import logging
import re
from typing import Union, cast

import aiohttp
import discord
from discord.ext import tasks
from redbot.core import Config, commands, checks
from redbot.core.utils.menus import start_adding_reactions
from redbot.core.utils.chat_formatting import box

logger = logging.getLogger("red.RedAppsv2.EmojiVote")


class EmojiVote(commands.Cog):
    """Channel de vote pour emojis propos√©s par la communaut√©"""

    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        self.config = Config.get_conf(self, identifier=736144321857978388, force_registration=True)

        default_guild = {'channel': None,
                         'booster_bonus': True,
                         'mods_immune': True,
                         
                         'props_users': {},
                         'props_expiration': None,
                         'props_duration': 604800} # Une semaine
        self.config.register_guild(**default_guild)

        self.check_emoji_votes.start()


    @tasks.loop(minutes=1)
    async def check_emoji_votes(self):
        all_guilds = await self.config.all_guilds()
        for g in all_guilds:
            if all_guilds[g]['channel']:
                if all_guilds[g]['props_expiration'] + all_guilds[g]['props_duration'] <= time.time():
                    guild = self.bot.get_guild(g)
                    channel = guild.get_channel(all_guilds[g]['channel'])
                    await self.config.guild(guild).props_users.clear()
                    await self.config.guild(guild).props_expiration.set(time.time())
                    duration = await self.config.guild(guild).props_duration()
                    
                    ow = channel.overwrites
                    for target in [t for t in ow if type(t) in (discord.Member, discord.User)]:
                        await channel.set_permissions(ow[target], overwrite=None)
                    
                    em = discord.Embed(title="Nouvelle p√©riode de propositions d'emojis", description="Les limites de propositions ont √©t√© r√©initialis√©es.\n" \
                                    "N'oubliez pas que vous n'avez le droit qu'√† un nombre limit√© de propositions et qu'elles doivent √™tre r√©alis√©es dans des messages distincts.")
                    em.add_field(name="Fin de la p√©riode*", value=box((datetime.now() + timedelta(seconds=duration)).strftime("%d/%m/%Y %H:%M")))
                    em.set_footer(text="*Estimation, la p√©riode peut terminer avant ou apr√®s si un mod√©rateur le d√©cide")
                    await channel.send(embed=em)

    @check_emoji_votes.before_loop
    async def before_check(self):
        logger.info('Starting check_emoji_votes loop...')
        await self.bot.wait_until_ready()
        
        
    @commands.group(name="emojivoteset", aliases=['evset'])
    @checks.admin_or_permissions(manage_messages=True)
    async def emojivote_settings(self, ctx):
        """Groupe de commandes de configuration du salon de vote d'emojis"""
        
    @emojivote_settings.command(name="channel")
    async def props_channel(self, ctx, channel: discord.TextChannel = None):
        """Configurer le salon textuel re√ßevant les propositions d'emojis, activant de facto la fonctionnalit√© sur votre serveur
        
        Ne pas pr√©ciser de salon d√©sactive la fonctionnalit√© sur votre serveur"""
        if channel:
            await self.config.guild(ctx.guild).channel.set(channel.id)
            await self.config.guild(ctx.guild).props_expiration.set(time.time())
            await ctx.send(f"**Channel de proposition configur√©** ‚Ä¢ V√©rifiez que {channel.mention} soit correctement param√©tr√© en permissions, notamment en donnant l'acc√®s en √©criture aux membres ayant la possibilit√© de proposer les emojis.")
        else:
            await self.config.guild(ctx.guild).channel.clear()
            await ctx.send("**Proposition d'emojis d√©sactiv√©** ‚Ä¢ Aucun channel n'est d√©sormais d√©di√© √† cette fonctionnalit√©")
            
    @emojivote_settings.command(name="immunemods")
    async def mods_immune(self, ctx):
        """Activer/d√©sactiver l'immunit√© des mod√©rateurs √† la suppression/mute (permissions `manage_messages` n√©cessaire)"""
        current = await self.config.guild(ctx.guild).mods_immune()
        if current is True:
            await ctx.send("**D√©sactiv√©** ‚Ä¢ Les mod√©rateurs ne sont plus immunis√©s dans le salon de propositions/vote")
        else:
            await ctx.send("**Activ√©** ‚Ä¢ Les mod√©rateurs sont immunis√©s √† la suppression de propositions supperflues et au mute de salon")
        await self.config.guild(ctx.guild).mods_immune.set(not current)
            
    @emojivote_settings.command(name="periode")
    async def props_duration(self, ctx, value: int = 10080):
        """Modifie le temps (en minutes) apr√®s lequel la p√©riode de vote/propositions change
        
        Par d√©faut 10080 (1 semaine)
        La valeur ne peut √™tre inf√©rieure √† 30 minutes"""
        if value < 30:
            await ctx.send("**Erreur** ‚Ä¢ La p√©riode ne peut √™tre inf√©rieure √† 30 minutes")

        value *= 60
        await self.config.guild(ctx.guild).props_duration.set(value)
        await ctx.send(f"**Valeur modifi√©e** ‚Ä¢ Les p√©riodes de propositions dureront d√©sormais {value / 60} minutes")
            
    @emojivote_settings.command(name="manualreset")
    async def manual_reset(self, ctx):
        """D√©marre manuellement une nouvelle p√©riode et reset les limites de propositions
        
        Attention, cette action est irr√©versible"""
        guild = ctx.guild
        channel = await self.config.guild(guild).channel()
        if channel:
            channel = guild.get_channel(channel)
            await self.config.guild(guild).props_users.clear()
            await self.config.guild(guild).props_expiration.set(time.time())
            duration = await self.config.guild(guild).props_duration()
            
            em = discord.Embed(title="Nouvelle p√©riode de propositions d'emojis", description="Les limites de propositions ont √©t√© r√©initialis√©es.\n" \
                               "N'oubliez pas que vous n'avez le droit qu'√† un nombre limit√© de propositions et qu'elles doivent √™tre r√©alis√©es dans des messages distincts.")
            em.add_field(name="Fin de la p√©riode*", value=box((datetime.now() + timedelta(seconds=duration)).strftime("%d/%m/%Y %H:%M")))
            em.set_footer(text="*Estimation, la p√©riode peut terminer avant ou apr√®s si un mod√©rateur le d√©cide")
            
            ow = channel.overwrites
            for target in [t for t in ow if type(t) in (discord.Member, discord.User)]:
                await channel.set_permissions(ow[target], overwrite=None)
            
            await channel.send(embed=em)
        else:
            await ctx.send("**Erreur** ‚Ä¢ Le salon de proposition d'emojis n'est pas configur√©. Consultez `;help evset channel` pour plus d'informations.")

    @emojivote_settings.command(name="booster")
    async def booster_bonus(self, ctx):
        """Activer/d√©sactiver la possibilit√© pour les boosters du serveur de proposer 2 emojis plut√¥t qu'un seul"""
        current = await self.config.guild(ctx.guild).booster_bonus()
        if current is True:
            await ctx.send("**D√©sactiv√©** ‚Ä¢ Les boosters du serveur n'auront plus qu'une seule proposition possible")
        else:
            await ctx.send("**Activ√©** ‚Ä¢ Les boosters du serveur b√©n√©ficient d√©sormais de la possibilit√© de proposer deux emojis")
        await self.config.guild(ctx.guild).booster_bonus.set(not current)


    @commands.Cog.listener()
    async def on_message(self, message):
        channel, guild, author = message.channel, message.guild, message.author
        setts = await self.config.guild(guild).all()
        
        if channel.id == setts.get('channel', False):
            prop_nb = setts['props_users'].get(str(author.id), 0)
            prop_limit = 1 if not author.premium_since else 2
            props = 0
            
            if prop_nb >= prop_limit and not all([author.permissions_in(channel).manage_messages and setts['mods_immune']]):
                errortxt = "‚ÄºÔ∏è **Limite de propositions atteinte** ‚Ä¢ Vous ne pouvez pas faire plus de propositions pour la p√©riode donn√©e."
                if setts['booster_bonus'] and prop_limit > 1:
                    errortxt += "\nüíé Boostez le serveur pour obtenir la possibilit√© de faire une seconde proposition."
                try:
                    await author.send(errortxt)
                except Exception:
                    pass
                return await message.delete()
            
            urls = re.compile(r'(https?://\S*\.\S*)', re.DOTALL | re.IGNORECASE).findall(message.content)
            if message.attachments:
                props += len(message.attachments)
            if urls:
                len(urls)
            
            if props > 1:
                try:
                    txt = f"‚ÄºÔ∏è **Impossible** ‚Ä¢ Vous avez tent√© de faire plus d'une proposition √† la fois. Veuillez poster vos propositions dans des messages s√©pares (URL ou t√©l√©chargements directs)."
                    await author.send(txt)
                except Exception:
                    pass
                return message.delete()
            
            await self.config.guild(guild).props_users(author.id, value=prop_nb + props)
            if prop_nb + props >= prop_limit and not all([author.permissions_in(channel).manage_messages and setts['mods_immune']]):
                await channel.set_permissions(author, send_messages=False, reason="Proposition(s) d'emoji r√©alis√©e(s)")
            
            start_adding_reactions(message, ['‚¨ÜÔ∏è','‚¨áÔ∏è'])
        
